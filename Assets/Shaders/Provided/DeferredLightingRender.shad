
#if VERT_SHADER

// TODO - Should be in its own vertex shader file honestly...
#include "Common/ScreenHelpers.hshad"

layout(location = 0) out vec2 texCoords;

void main() 
{
	texCoords = GetScreenTextureCoords(gl_VertexIndex);
	gl_Position = TextureCoordsToClipSpace(texCoords);
}

#elif FRAG_SHADER

#define VIEW_BOUND 3
#include "Common/UniformBufferCommon.hshad"
#include "Common/LightingCommon.hshad"

layout(location = 0) in vec2 texCoords;
layout(location = 0) out vec4 pixelLightColor;

layout(binding = 0) uniform sampler2D positionGBuffer;
layout(binding = 1) uniform sampler2D normalGBuffer;
layout(binding = 2) uniform sampler2D albedoGBuffer;
//layout(binding = 3) uniform sampler2D shadowMapTexture;

layout(binding = 4) uniform LightDescriptions
{
	Light lights;
};

void main()
{
	vec4 fragPosSample = texture(positionGBuffer, texCoords);
	vec3 position = fragPosSample.xyz;
	uint shadingModel = uint(fragPosSample.w);

	vec3 normal = texture(normalGBuffer, texCoords).rgb;
	vec4 albedo = texture(albedoGBuffer, texCoords);

	vec3 col = albedo.rgb;
	if(length(normal) > 0)
	{
		if(shadingModel == PHONG)
		{
			col = PhongModel(lights, viewPosition.xyz, position, normal, albedo);
		}
		else if(shadingModel == BLINN)
		{
			col = BlinnModel(lights, viewPosition.xyz, position, normal, albedo);
		}
		else if(shadingModel == TOON)
		{
			col = ToonShadingModel(lights, position, normal, albedo);
		}
	}

	pixelLightColor = vec4(col, 1.0);
}

#endif
