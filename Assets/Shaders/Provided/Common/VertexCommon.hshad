#pragma once
#include "VulkanCommon.hshad"

#if VERT_SHADER
// Vertex Inputs
layout(location = 0) in vec4 position;
layout(location = 1) in vec3 normal;
layout(location = 2) in vec3 tangent;
layout(location = 3) in vec2 uvCoords;
//layout(location = 4) in vec3 color;

layout(location = 0) out vec3 FragPosition;
layout(location = 1) out vec3 Normal;
layout(location = 2) out vec2 TexCoords;
layout(location = 3) out vec3 Tangent;

#endif

layout(binding = 0) uniform Transformations
{
	mat4 world;
	mat4 view;
	mat4 projection;
};

vec3 GetWorldPosition()
{
	return vec3(world * position);
}

vec3 GetWorldNormal()
{
	return (transpose(inverse(world)) * vec4(normal, 0)).xyz;
}

vec3 GetWorldTangent()
{
	return (transpose(inverse(world)) * vec4(tangent, 0)).xyz;
}

vec4 GetClipSpacePosition()
{
	vec4 clipPos = projection * view * world * position;
	return VulkanProjectionModification(clipPos);
}
